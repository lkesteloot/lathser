
To do next:
    - Make proper web page:
        - Offer which model to load.
        - Show model in 3D with controls.
        - Add buttons for:
            - Generating PRN.
            - Generating SVG.
        - Change algorithm to be callback-based so we can update UI between steps.
        - Update 3D UI between steps.
        - Show image being calculated.
    - Cut both sides:
        - 0
        - 180
        - 180 + 1/16
        - 0 + 1/16
        - ...
    - Try DNA.
    - Increase kerf to get better ears.
    - Try output from ctrl-cut.
        - http://timgolden.me.uk/python/win32_how_do_i/print.html#win32print
    - When lighting, sort back-to-front (painter's algorithm).
    - When lighting, rotate normal.
    - Add cut lines to let smaller pieces fall off. Not sure how to do this.
      Could try doing it at the raster layer (by drawing radial lines to the
      edges) but that might leave artifacts on the edge of the piece.

Parts of system:

    - Model importer.
    - Path generator with parameters.
    - PRN file exporter.
    - PRN downloader to printer.
    - Rotation schedule downloader to Arduino.

Notes:

    - Convert model with: http://www.greentoken.de/onlineconv/
        - Make JSON output.
    - Name: Lathser (/lathe-zer/)
    - http://en.wikipedia.org/wiki/Visual_hull
    - To forward ports from hitch to local:
        - Add this to /etc/ssh/sshd_config on server:
            # LK: Allow ssh to forward ports.
            GatewayPorts clientspecified
        - Then locally:
            ssh -R :8000:localhost:8000 lk@hitch.headcode.com
        - Then hit:
            http://hitch.headcode.com:8000/lathser/

Research:

    - Vectorization:
        - http://en.wikipedia.org/wiki/Vectorization_(image_tracing)
        - http://stackoverflow.com/questions/6772230/is-there-some-well-known-algorithm-which-turns-users-drawings-into-smoothed-sha
        - http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm
            - Simplify list of points by eliminating points that are within epsilon
                of a simpler line sequence.
        - http://outliner.codeplex.com/
            - Has several DOC files for documentation, but I don't have a high-level
              idea of how it works.
        - https://code.google.com/p/shapelogic/wiki/vectorization
            - Not much info. Preferred algorithm is: "The main idea is that
              this will read a whole multi line at a time. Then later it will
              split it according to max distance of pixels to the line between
              start and end point of the multi line."
        - http://cardhouse.com/computer/vector.htm
            - Generate four vectors for each pixel that's on.
            - Remove pairs of identical pixels.
            - Coalesce co-linear vectors.
        - Proposal:
            - For every pixel:
                - If different horizontally or vertically, insert edge.
            - Start with any edge, find connecting edge and link into a list.
            - Run simplification algorithm.
            - Generate SVG with points.

Models:

    - LargeKnight: http://www.thingiverse.com/thing:1100/#files (low-res)
    - My_Scan_1: http://www.thingiverse.com/thing:221556/#files (high-res)
    - DNA: https://grabcad.com/library/dynamic-dna

Web rewrite:

    - To do:
        - Support raster on Epilog.
        - Load model from Dropbox or web.
        - Save parameters with each model:
            - Initial model rotation.
            - Shade numbers.
            - Raster passes and angles.
        - Save PRN or SVG to Dropbox or download.
        - Display model in 3D.
        - Display paths and cuts in 3D.
    - General UI:
        - Choose model.
        - Choose parameters.
            - Number of angles.
            - Shades.
        - Generate all images and cuts.
        - Preview them all with a slider.
        - Download PRN file.

